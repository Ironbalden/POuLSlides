#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{CambridgeUS}
\usecolortheme{beaver}
% or ...
% set fonts for nicer pdf view
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}

\setbeamercovered{transparent}
% or whatever (possibly just delete it)



\titlegraphic{\includegraphics[height=2cm]{poul-logo.pdf}}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Itemize
Talk at a conference/colloquium.
 
\end_layout

\begin_layout Itemize
Talk length is about 20min.
 
\end_layout

\begin_layout Itemize
Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Command-line kung-fu
\end_layout

\begin_layout Title
Command line kung fu
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Bash e filtri
\begin_inset Note Note
status open

\begin_layout Plain Layout
optional, use only with long paper titles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subtitle
Bash, filtri & co.
\end_layout

\begin_layout Author
Giulio De Pasquale
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{mailto:giulio@depasquale.eu}{
\backslash
nolinkurl{giulio@depasquale.eu}}
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Giulio De Pasquale
\end_layout

\end_inset


\end_layout

\begin_layout Date
Corsi GNU/Linux Avanzati 2016
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Either use conference name or its abbreviation.
 
\end_layout

\begin_layout Itemize
Not really informative to the audience, more for people (including yourself)
 who are reading the slides online
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Corsi Linux Avanzati 2016
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, should be abbreviation of conference name
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Itemize
Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Itemize
At *most* three subsections per section.
 
\end_layout

\begin_layout Itemize
Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Itemize
A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Itemize
In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Itemize
If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Bash 101
\end_layout

\begin_layout Subsection
I vantaggi del terminale
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
“Il terminale? Nel 2016?”
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
\begin_inset Note Note
status open

\begin_layout Plain Layout
A title should summarize the slide in an understandable fashion for anyone
 who does not follow everything on the slide itself.
 
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Universale: presente su ogni distribuzione GNU/Linux.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
e anche su altri sistemi (anche sul mac)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Si può usare da remoto e/o su una macchina senza schermo.
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Consente di automatizzare compiti ripetitivi
\end_layout

\begin_deeper
\begin_layout Itemize
Ad esempio, permette di operare in maniera precisa e veloce su molti files.
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
“Struttura di un comando”
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size larger
comando [opzioni] [argomenti]
\end_layout

\begin_layout Itemize
Tutto ciò che è tra parentesi quadre è facoltativo.
\end_layout

\begin_layout Itemize
Le opzioni si passano con uno o due trattini (- o 
\begin_inset ERT
status open

\begin_layout Plain Layout

-
\backslash
/-
\end_layout

\end_inset

)
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Esempio
\end_layout

\end_inset


\begin_inset Formula $\text{\underbrace{cuocipizza}_{comando} \underbrace{-fornoalegna}_{opzione} \underbrace{margherita}_{argomento} \underbrace{capricciosa}_{argomento}}$
\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Man
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
I have no idea what i'm doing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center

\family typewriter
\size larger
man
\end_layout

\begin_layout Itemize
Permette di leggere la documentazione (se presente) di un comando passato
 come argomento.
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Per cercare all'interno della man page basta scrivere 
\family typewriter
/terminecercato
\family default
 e premere 
\emph on
Enter
\emph default
.
 Premendo 
\emph on
n
\emph default
 si passa al prossimo risultato.
\end_layout

\begin_layout Itemize
Premendo 
\emph on
p
\emph default
 si torna in cima.
\end_layout

\begin_layout Itemize
Premendo 
\family typewriter
q
\family default
 si esce dal manuale.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
In caso di emergenza
\end_layout

\end_inset


\begin_inset Formula $\underbrace{man}_{comando}\,\underbrace{man}_{argomento}$
\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Comandi bash di base
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Muovere i primi passi
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ls
\family default
 -- elenca i file nella cartella corrente
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ls nomecartella
\family default
 -- elenca i file della cartella con quel nome
\end_layout

\begin_layout Itemize

\family typewriter
-lah
\family default
 -- mostra i file incolonnati con maggiori informazioni (-l) includendo
 anche i file nascosti (-a) con le dimensioni in formato human-readable
 (-h)
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
cd nomecartella
\family default
 -- ci sposta nella directory
\end_layout

\begin_deeper
\begin_layout Itemize
.
 è la directory corrente, ..
 è la directory un livello più in su
\end_layout

\begin_layout Itemize
~ è la cartella home dell'utente corrente.
 
\end_layout

\begin_layout Itemize

\family typewriter
~<utente>
\family default
 è la home di 
\family typewriter
<utente>
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
pwd
\family default
 -- stampa la directory corrente
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Creiamo qualcosa
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
touch nomefile
\family default
 -- crea un file vuoto se non esiste, altrimenti ne aggiorna la data e l'ora
 dell'ultimo accesso
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
mkdir nomecartella
\family default
 -- crea una directory vuota
\end_layout

\begin_deeper
\begin_layout Itemize
-p -- crea tutte le directory necessarie (e.g.
 
\family typewriter
mkdir a/b/c/
\family default
 crea anche 
\emph on
a
\emph default
 e 
\emph on
b
\emph default
 se non esistono)
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Nota importante
\end_layout

\end_inset

Il filesystem Linux, a differenza di quello Windows, è case sensitive.
\begin_inset Newline newline
\end_inset

Se create (o modificate) i file ricordate che 
\family typewriter
foo 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
neq$
\end_layout

\end_inset

 Foo 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
neq$
\end_layout

\end_inset

 FOO
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Io ti ho creato, io ti distruggo
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Da qui rm e varie (shred).
 Alert sul fatto che è tutto sempre definitivo.
 Mini-demo sui comandi visti finora.
 
\end_layout

\begin_layout Plain Layout
Poi Editor di testo.
 nano (-w), vim e emacs.
 Mini demo di nano e vim.
\end_layout

\begin_layout Plain Layout
Filtri, pipe e cazzi.
 Demo su filtri pipe e cazzi.
\end_layout

\begin_layout Plain Layout
[Se ci sta: script bash]
\end_layout

\begin_layout Plain Layout
[optional: pre-intro sul POuL.]
\end_layout

\begin_layout Plain Layout
[optional: pre-intro sull'amministrazione di sistema.]
\end_layout

\begin_layout Plain Layout
[optional: fetta di culo top kek]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
rm nomefile
\family default
 -- cancella un file
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
-r
\family default
 -- se il file è una cartella, cancella ricorsivamente il suo contenuto
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
rmdir nomecartella
\family default
 -- cancella una cartella solo se vuota
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Se siete paranoici: 
\family typewriter
shred nomefile
\family default
 -- sovrascrive un file con bit random 3 volte
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
-u
\family default
 -- dopo averlo sovrascritto, lo cancella
\end_layout

\begin_layout Itemize
-n <k> -- sovrascrive il file k volte invece di tre
\end_layout

\begin_layout Itemize
-z -- sovrascrive il file un'ultima volta con degli zeri, per nascondere
 la rimozione sicura
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Attenzione
\end_layout

\end_inset

 Nel terminale, non esiste un “cestino”.
 Una volta che avete rimosso un file, è perso per sempre.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnotemark
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnotetext{A meno di strani magheggi con software forense}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Modifiche di base ai file
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
cp sorgente destinazione
\family default
 -- Copia il file 
\family typewriter
sorgente
\family default
 nel file 
\family typewriter
destinazione
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
-r
\family default
 -- Da usare per copiare una directory
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
mv sorgente destinazione
\family default
 -- Sposta il file sorgente in destinazione
\end_layout

\begin_deeper
\begin_layout Itemize
Si può usare per rinominare i file se 
\family typewriter
destinazione
\family default
 è nella stessa cartella di 
\family typewriter
sorgente
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ln -s sorgente /path/al/collegamento
\family default
 -- Crea un collegamento simbolico al file 
\family typewriter
sorgente
\family default
 in 
\family typewriter
/path/al/collegamento
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Historia magistra vitae
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Ctrl+p
\family default
 o 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
uparrow$
\end_layout

\end_inset

 per andare indietro (comandi più vecchi) nella history dei comandi
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Ctrl+n
\family default
 o 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
downarrow$
\end_layout

\end_inset

 per avanti (comandi più recenti) nella history dei comandi
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Ctrl+r
\family default
 per effetturare la ricerca di una stringa nei comandi della history
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
La history è salvata nel file 
\family typewriter
.bash_history
\family default
 nella home dell'utente
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Il comando 
\family typewriter
history
\family default
 vi mostra ...
 la vostra history dei comandi
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Domande?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\begin_layout Standard
\align center

\size huge
Demo!
\end_layout

\end_deeper
\begin_layout Section
vi for dummies
\end_layout

\begin_layout Subsection
Introduzione
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Text-editor e le religioni
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Nell'amministrazione di sistemi Unix e Unix-compatibili si tende a passare
 molto tempo usando editor di testo.
\end_layout

\begin_layout Standard
Viene pertanto naturale abituarsi ad un certo editor, personalizzarlo, renderlo
 più efficace.
\end_layout

\begin_layout Standard
Gli editor principali su i sistemi Unix sono tre:
\end_layout

\begin_layout Itemize

\family typewriter
nano
\end_layout

\begin_layout Itemize

\family typewriter
vi
\end_layout

\begin_layout Itemize

\family typewriter
GNU Emacs
\end_layout

\begin_layout Standard
Nano è un editor semplice da usare, che offre poche possibilità di personalizzaz
ione e decisamente poche funzionalità avanzate.
\end_layout

\begin_layout Standard
vi e GNU Emacs sono due editor complessi ma molto potenti.
\end_layout

\end_deeper
\begin_layout Subsection
vi
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
vi for dummies
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Perché imparare ad usare vi, anche se ci piace GNU Emacs, nano, o qualcos'altro?
\end_layout

\begin_layout Standard
Senza entrare nelle guerre di religione, vi è l'unico editor che sicuramente
 troverete in tutti gli Unix che vi troverete ad usare.
 Infatti la sua presenza è 
\begin_inset Quotes eld
\end_inset

imposta
\begin_inset Quotes erd
\end_inset

 nella 
\begin_inset Quotes eld
\end_inset

Single UNIX specification
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
editor modale
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Vi è un editor 
\begin_inset Quotes eld
\end_inset

particolare
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Vi è un editor 
\begin_inset Quotes eld
\end_inset

modale
\begin_inset Quotes erd
\end_inset

, nel senso che ha due modalità di funzionamento, e gli stessi tasti si
 comportano diversamente a seconda della modalità in cui vi trovate.
\end_layout

\begin_layout Standard
Le due modalità sono la 
\begin_inset Quotes eld
\end_inset

modalità inserimento
\begin_inset Quotes erd
\end_inset

 e la 
\begin_inset Quotes eld
\end_inset

modalità comandi
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
La modalità predefinita è la modalità comandi.
 Premendo Esc si torna sempre nella modalità comandi.
\end_layout

\begin_layout Standard
Premendo i, a oppure o si entra nella modalità inserimento.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
modalità comandi
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Nella modalità comandi, tutti i tasti della vostra tastiera forniscono dei
 comandi all'editor.
 Sequenze diverse di caratteri forniscono comandi diversi.
\end_layout

\begin_layout Itemize
Spostarsi nel file: h (sinistra) j (sotto) k (sopra) l (destra)
\end_layout

\begin_layout Itemize
i -- inserire del testo a partire dalla posizione corrente del cursore
\end_layout

\begin_layout Itemize
a -- inserire del testo appartire dalla posizione immediatamente successiva
 al cursore
\end_layout

\begin_layout Itemize
/ -- inizia una ricerca di testo nel documento
\end_layout

\begin_layout Itemize
n -- trova la prossima occorrenza del testo cercato nella ricerca
\end_layout

\begin_layout Itemize
u -- annulla l'ultima operazione (undo)
\end_layout

\begin_layout Itemize
.
 -- ripete l'ultima operazione (eventualmente annulla l'annullamento)
\end_layout

\begin_layout Itemize
: (due punti) -- comincia ad inserire un comando
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Vi for dummies - i comandi
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
:w -- write, salva il file corrente
\end_layout

\begin_layout Itemize
:q -- quit (esci)
\end_layout

\begin_layout Itemize
I comandi possono essere concatenati: salva + esci = :wq
\end_layout

\begin_layout Standard
A seconda del tipo di vi che state usando (vim, nvi, elvis o altro) ci potrebber
o essere dalle decine alle centinaia di altri comandi, ma questi sono bene
 o male quelli che vi serviranno sempre.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Vi for dummies - la modalità inserimento
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Nella modalità inserimento si può effettivamente inserire/cancellare del
 testo.
\end_layout

\begin_layout Standard
Per entrare in modalità inserimento si preme:
\end_layout

\begin_layout Itemize
i -- per inserire del testo nella posizione corrente del cursore (insert)
\end_layout

\begin_layout Itemize
a -- per 
\begin_inset Quotes eld
\end_inset

appendere
\begin_inset Quotes erd
\end_inset

 del testo, ovvero inserire del testo nella posizione immediatamente successiva
 a quella del cursore
\end_layout

\begin_layout Itemize
o -- per inserire del testo nella linea successiva a quella corrente
\end_layout

\begin_layout Standard
Dopo ognuno di questi comandi si entra nella modalità inserimento.
 Per uscire dalla modalità inserimento si preme Esc.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\begin_layout Standard
\align center

\size larger
Demo!
\end_layout

\end_deeper
\begin_layout Section
Altri comandi bash e filtri
\end_layout

\begin_layout Subsection
Bash++
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Bash++
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
cat
\family default
 -- concatena e stampa file su schermo
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
less
\family default
 -- stampa file su schermo con una finestra scorrevole, come la manpage
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
echo
\family default
 -- stampa il valore di un'espressione
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
locate
\family default
 -- cerca file in un database
\end_layout

\begin_deeper
\begin_layout Itemize
Il database va aggiornato periodicamente con il comando 
\family typewriter
updatedb
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
find
\family default
 -- cerca dei file all'interno di una gerarchia di cartelle, eventualmente
 con dei parametri di ricerca
\end_layout

\end_deeper
\begin_layout Subsection
Redirezione e pipe
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Standard streams
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Ogni processo ha almeno 3 canali di comunicazione di default:
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
stdin (0)
\emph default
 -- il canale che riceve l'input, di default riceve ciò che l'utente scrive
 sul terminale
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\emph on
stdout (1)
\emph default
 -- il canale che stampa l'output del programma, di default scrive su schermo
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\emph on
stderr (2)
\emph default
 -- un canale per segnalare errori senza mischiarli con l'output, di default
 scrive su schermo
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Con 
\emph on
pipe
\emph default
 e 
\emph on
redirezioni
\emph default
 si possono connettere in vari modi questi canali, creando delle vere e
 proprie catene di comandi bash che permettono di risolvere molti problemi
 unendo tanti blocchi semplici.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Redirezione
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
comando < file
\family default
 -- connette stdin di un processo ad un file
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
comando > file
\family default
 -- connette stdout di un processo ad un file.
 Se il file esiste viene cancellato e sovrascritto
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
comando 2> file
\family default
 -- connette stderr di un processo ad un file.
 Se il file esiste viene cancellato e sovrascritto
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
comando 
\family typewriter
&> file 
\family default
-- connette stdout e stderr di un processo ad un file.
 Se il file esiste viene cancellato e sovrascritto
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Utilizzando 
\family typewriter
>>
\family default
 al posto di 
\family typewriter
>
\family default
 in uno degli ultimi 3 comandi si ottiene lo stesso risultato ma il risultato
 viene aggiunto al file se esistente
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
comando1 | comando2
\family default
 -- lo stdout di comando1 diventa lo stdin di comando2
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Esecuzione condizionale
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
comando1 && comando2
\family default
 -- esegue 
\family typewriter
comando2
\family default
 se e solo se 
\family typewriter
comando1
\family default
 ha successo (codice di ritorno = 0)
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
comando1 || comando2 
\family default
-- esegue 
\family typewriter
comando2
\family default
 se e solo se 
\family typewriter
comando1
\family default
 fallisce (codice di ritorno 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
neq$
\end_layout

\end_inset

 0)
\end_layout

\end_deeper
\begin_layout Subsection
Filtri
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Cos'è un filtro ?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In Unix, un filtro è un programma che:
\end_layout

\begin_layout Itemize
legge dati in ingresso sullo stdin
\end_layout

\begin_layout Itemize
trasforma questi dati in qualche maniera
\end_layout

\begin_layout Itemize
produce dell'output su stdout.
 l'ouput può essere una versione trasformata dell'input oppure altro.
\end_layout

\begin_layout Standard
In Unix i filtri sono importanti perché data la loro natura (leggere su
 stdin e scrivere su stdout) si prestano molto bene ad essere usati 
\begin_inset Quotes eld
\end_inset

in cascata
\begin_inset Quotes erd
\end_inset

 tramite le pipe.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
cut
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Estrae colonne delimitate da un carattere speciale da ogni riga di un file
 
\end_layout

\begin_layout Itemize

\family typewriter
-d
\family default
 -- specifica il delimitatore (default Tab)
\end_layout

\begin_layout Itemize

\family typewriter
-f
\family default
 -- specifica quale colonna estrarre (one-based)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
sort
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Ordina le righe di un file
\end_layout

\begin_layout Itemize

\family typewriter
-k
\family default
 -- specifica quali colonne del file usare come chiave per l'ordinamento
\end_layout

\begin_layout Itemize

\family typewriter
-t
\family default
 -- specifica il delimitatore tra le colonne (default whitespace)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
uniq
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Stampa le righe uniche di un file 
\bar under
già ordinato
\end_layout

\begin_layout Itemize

\family typewriter
-c
\family default
 -- conta le occorrenze
\end_layout

\begin_layout Itemize

\family typewriter
-d
\family default
 -- mostra solo i duplicati
\end_layout

\begin_layout Itemize

\family typewriter
-u
\family default
 -- mostra solo i non duplicati
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
wc
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Conta righe, parole e caratteri
\end_layout

\begin_layout Itemize

\family typewriter
-l
\family default
 -- mostra solo il numero di righe
\end_layout

\begin_layout Itemize

\family typewriter
-w
\family default
 -- mostra solo il numero di parole
\end_layout

\begin_layout Itemize

\family typewriter
-c
\family default
 -- mostra solo il numero di caratteri
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
tee
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Connette il suo stdin allo stdin di due o più file
\end_layout

\begin_layout Itemize
Utile per mostrare l’output di un comando a schermo e darlo come input ad
 un altro comando
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
head 
\family default
e
\family typewriter
 tail
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
head
\family default
 mostra le prime 10 righe di un file, 
\family typewriter
tail
\family default
 le ultime 10
\end_layout

\begin_layout Itemize

\family typewriter
-nX
\family default
 -- mostra le prime/ultime X righe
\end_layout

\begin_layout Itemize

\family typewriter
tail -f
\family default
 -- permette di 
\begin_inset Quotes eld
\end_inset

tenere d'occhio” un file a cui vengono continuamente aggiunte righe in coda
 (ad esempio un log)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
grep
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
grep è uno dei filtri più potenti ed importanti di un sistema Unix.
\end_layout

\begin_layout Standard
Mostra le righe di un file che corrispondono (o meno) ad un pattern (regular
 expression 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://xkcd.com/208/
\end_layout

\end_inset


\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
Grep permette di ricevere in input del testo, una linea alla volta, ed effettuar
e delle ricerche con opportuni parametri all'interno di ogni linea, e stampare
 il risultato.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
grep (2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
-v
\family default
 -- attiva il match invertito (mostra le righe che 
\series bold
non
\series default
 corrispondono)
\end_layout

\begin_layout Itemize

\family typewriter
-i
\family default
 -- ricerca case insensitive
\end_layout

\begin_layout Itemize

\family typewriter
-c
\family default
 -- conta i match
\end_layout

\begin_layout Itemize

\family typewriter
-l
\family default
 -- mostra solo i nomi dei file con match
\end_layout

\begin_layout Itemize

\family typewriter
-r
\family default
 -- ricerca ricorsivamente all'interno dei file a partire da una cartella
\end_layout

\begin_layout Itemize

\family typewriter
-E
\family default
 -- usa le extended regular expression
\end_layout

\begin_layout Itemize
-P -- usa PCRE, la sintassi per le espressioni regolari in stile Perl, presenti
 nella maggior parte dei linguaggi di programmazione
\end_layout

\begin_layout Itemize
-o -- mostra solo la parte di testo che matcha la regexp, non tutta la linea
 (utile per estrarre del testo)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
sed
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Sed è l'abbreviazione di 
\series bold
s
\series default
tream 
\series bold
ed
\series default
itor.
 
\end_layout

\begin_layout Standard
Trasforma ogni linea che legge dallo stdin in base ad una serie di istruzioni
 date come argomenti al programma stesso, e stampa il risultato sullo stdout
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Sostituzione di testo
\end_layout

\end_inset

echo night | sed s/night/day
\end_layout

\begin_layout Standard
Ma può fare molto di più.
\end_layout

\begin_layout Standard
Per maggiori informazioni: 
\begin_inset CommandInset href
LatexCommand href
name "http://www.grymoire.com/Unix/Sed.html"
target "http://www.grymoire.com/Unix/Sed.html"

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
awk
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Nella versione più semplice, awk può dividere una serie di linee in formato
 tabulare ed effettuare delle operazioni su ogni elemento di ogni linea.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Elenco di tutti i programmi eseguiti da un utente
\end_layout

\end_inset

ps aux | awk '$1 == 
\begin_inset Quotes eld
\end_inset

pippo
\begin_inset Quotes erd
\end_inset

 {print $11}'
\end_layout

\begin_layout Standard
Quando awk legge una linea, la spezza ad ogni occorrenza di un delimitatore
 (lo spazio è il delimitatore predefinito, altrimenti è possibile specificare
 un delimitatore personalizzato con l'opzione -F).
 Alla variabile $0 viene assegnata l'intera linea, a $1 il primo elemento
 della linea, a $2 il secondo e così via.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Awk (links)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Effective AWK programming, il manuale della versione GNU di awk (quella
 distribuita con quasi tutte le distribuzioni di GNU/Linux):
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "https://www.gnu.org/software/gawk/manual/"
target "https://www.gnu.org/software/gawk/manual/"

\end_inset


\end_layout

\begin_layout Standard
Una buona guida ad awk:
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "http://www.grymoire.com/Unix/Awk.html"
target "http://www.grymoire.com/Unix/Awk.html"

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Domande?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\begin_layout Standard
\align center

\size huge
Demo!
\end_layout

\end_deeper
\begin_layout Section*
Appendice
\end_layout

\begin_layout Subsection*
Fonti
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Per approfondire
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename admin.jpg
	scale 30

\end_inset


\begin_inset Newline newline
\end_inset

Google is your friend
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Last call
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center

\size largest
Domande?
\end_layout

\end_deeper
\begin_layout Subsection*
Licenza
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Goodbye and thanks for all the fish
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center

\size largest
Grazie per l'attenzione!
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename cc-by-sa.png
	height 0.9cm

\end_inset


\begin_inset Newline newline
\end_inset


\size footnotesize
Queste slides sono licenziate Creative Commons Attribution-ShareAlike 3.0
 Unported
\end_layout

\begin_layout Standard
\align center

\family typewriter
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.poul.org
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
